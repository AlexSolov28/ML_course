# -*- coding: utf-8 -*-
"""Lab_1_TMO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h8rypNfq6saqJnMY4rLBQ1o0KXXjFVC7

# Лабораторная работа №1

## Разведочный анализ данных. Исследование и визуализация данных.

## Описание датасета

 Этот датасет содержит информацию об успеваемости старшеклассников по математике, включая их оценки и демографическую информацию. Данные были собраны в трех средних школах США.

### Описание столбцов

* 'Gender'- пол учащегося
* 'Race/ethnicity' - расовая или этническая принадлежность учащегося
* 'Parental level of education' - самый высокий уровень достигнутого образования родителем (родителями) или опекуном (опекунами) учащегося
* 'Lunch' - получает ли учащийся бесплатный обед или обед по сниженной цене
* 'Test preparation course' - прошел ли учащийся курс подготовки к экзаменам
* 'Math score' -  оценка учащегося за стандартизированный тест по математике
* 'Reading score' - оценка учащегося за стандартизированный тест по чтению
* 'Writing score' - оценка учащегося за стандартизированный тест по письму

## Выгрузка библиотек и датасета
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Будем анализировать данные только на обучающей выборке
data = pd.read_csv("exams.csv")

"""## Характеристики датасета
Информация о датасете
"""

# Первые 5 строк датасета
data.head()

# Размер датасета - 1000 строк, 8 колонок
data.shape

# Список колонок
data.columns

# Список колонок с типами данных
data.dtypes

# Проверим наличие пустых значений
# Цикл по колонкам датасета
for col in data.columns:
    # Количество пустых значений - все значения заполнены
    temp_null_count = data[data[col].isnull()].shape[0]
    print('{} - {}'.format(col, temp_null_count))

# Основные статистические характеристки набора данных
data.describe()

# Определим уникальные значения для целевого признака
data['parental level of education'].unique()

"""## Визуализация"""

# Посчитаем количество студентов каждого пола
gen_count = pd.DataFrame(data['gender'].value_counts().reset_index())
gen_count.rename(columns = {'index':'gender','gender':'number of students'}, inplace=True)
gen_count

# Распределение студентов по полу
plt.figure(figsize=(8,6))
plt.pie(gen_count['number of students'], explode=(0.015,0),
        labels=gen_count['gender'],
        colors=['lightblue','lightgreen'], autopct='%1.2f%%',
        startangle=120)

centre_circle = plt.Circle((0,0),0.70,fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

plt.title("gender distribution")
plt.show()

# Посчитаем количесттво студентов получавших бесплатный обед или обед по сниженной цене
pd.DataFrame(data['lunch'].value_counts()).rename(columns={'lunch': 'number of students'})

"""### Диаграмма рассеяния
Позволяет построить распределение двух колонок данных и визуально обнаружить наличие зависимости. Не предполагается, что значения упорядочены
"""

fig, ax = plt.subplots(figsize=(10,10))
sns.scatterplot(ax=ax, x='race/ethnicity', y='math score', data=data)

"""### Гистограмма
Позволяет оценить плотность вероятности распределения данных.
"""

fig, ax = plt.subplots(figsize=(10,10))
sns.distplot(data['math score'])

"""### Jointplot
Комбинация гистограмм и диаграмм рассеивания.
"""

sns.jointplot(x='race/ethnicity', y='math score', data=data)

sns.jointplot(x='reading score', y='math score', data=data, kind="hex")

sns.jointplot(x='reading score', y='math score', data=data, kind="kde")

"""### Парные диаграммы
Комбинация гистограмм и диаграмм рассеивания для всего набора данных.

Выводится матрица графиков. На пересечении строки и столбца, которые соответстуют двум показателям, строится диаграмма рассеивания. В главной диагонали матрицы строятся гистограммы распределения соответствующих показателей.
"""

sns.pairplot(df)

sns.pairplot(data, hue="gender")

"""### Ящик с усами
Отображает одномерное распределение вероятности.
"""

# По горизонтали
sns.boxplot(x=data['math score'])

# По вертикали
sns.boxplot(y=data['math score'])

# Распределение параметра Humidity сгруппированные по gender.
sns.boxplot(x='gender', y='math score', data=data)

"""### Violin plot
Похоже на предыдущую диаграмму, но по краям отображаются распределения плотности
"""

sns.violinplot(x=df['math score'])

fig, ax = plt.subplots(2, 1, figsize=(10,10))
sns.violinplot(ax=ax[0], x=data['math score'])
sns.distplot(data['math score'], ax=ax[1])

# Распределение параметра math score сгруппированные по gender.
sns.violinplot(x='gender', y='math score', data=data)

sns.catplot(y='math score', x='gender', data=data, kind="violin", split=True)

"""## Корреляция признаков

"""

data.corr()

data.corr(method='pearson')

data.corr(method='kendall')

data.corr(method='spearman')

# Тепловая карта
sns.heatmap(data.corr())

# Вывод значений в ячейках
sns.heatmap(data.corr(), annot=True, fmt='.3f')

# Изменение цветовой гаммы
sns.heatmap(data.corr(), cmap='YlGnBu', annot=True, fmt='.3f')

# Треугольный вариант матрицы
mask = np.zeros_like(df.corr(), dtype=np.bool)
# чтобы оставить нижнюю часть матрицы
# mask[np.triu_indices_from(mask)] = True
# чтобы оставить верхнюю часть матрицы
mask[np.tril_indices_from(mask)] = True
sns.heatmap(data.corr(), mask=mask, annot=True, fmt='.3f')

fig, ax = plt.subplots(1, 3, sharex='col', sharey='row', figsize=(15,5))
sns.heatmap(data.corr(method='pearson'), ax=ax[0], annot=True, fmt='.2f')
sns.heatmap(data.corr(method='kendall'), ax=ax[1], annot=True, fmt='.2f')
sns.heatmap(data.corr(method='spearman'), ax=ax[2], annot=True, fmt='.2f')
fig.suptitle('Корреляционные матрицы, построенные различными методами')
ax[0].title.set_text('Pearson')
ax[1].title.set_text('Kendall')
ax[2].title.set_text('Spearman')

"""## Тепловая карта с указанием размера"""

fig, ax = plt.subplots(1, 1, sharex='col', sharey='row', figsize=(10,5))
fig.suptitle('Корреляционная матрица')
sns.heatmap(data.corr(), ax=ax, annot=True, fmt='.3f')

